"""
2015 - Mike Schladt
create_feature_vector.py - creates feature vectors from reports retrieved by cuckoo 2.0 REST API
OUTPUT CSV
"""

import argparse
import requests
import json
import sys

CUCKOO_REST_HOST = 'http://localhost:8090/'

def create_feature_vector2(json_report) :
    """
    Process cuckoo v1.2 report to extract  compatible tags
    Input : report : json object : cuckoo report as json object 
    Output : tags : set : set of tags
    """
    #create container for features
    features = {}
    
    #networking items
    if 'network' in json_report : 
        for key, value in json_report['network'].iteritems()  :
            try : 
                features['network_'+key] = len(value)
            except :
                pass
    
    #static items
    if 'static' in json_report :
        for key, value in json_report['static'].iteritems()  :
            try : 
                features['static_'+key] = len(value)
            except :
                pass  
                           
    #dropped files
    if 'dropped' in json_report : 
        features['dropped'] = len(json_report['dropped'])
    else : 
        features['dropped'] = 0   
    
    #behavior summary items
    if 'behavior' in json_report :
        if 'summary' in json_report['behavior'] :
            for key, value in json_report['behavior']['summary'].iteritems() :
                features['behavior_summary_'+key] = len(value)
    
            #api stats
        if 'apistats' in json_report['behavior'] :    
            for item in json_report['behavior']['apistats'] :
                for key, value in json_report['behavior']['apistats'][item].iteritems() :
                    if 'behavior_apistats_'+key in features :
                        features['behavior_apistats_'+key] = features['behavior_apistats_'+key] + value
                    else : 
                        features['behavior_apistats_'+key] = value    
    #strings
    if 'strings' in json_report : 
        features['strings'] = len(json_report['strings'])
    else :
        features['strings'] = 0    

    return features
      
def get_report(task_id) :
    """
    Uses cuckoo REST api to get JSON output of reported file
    INPUT: task_id : int : reported cuckoo task
    OUTPUT : report : json object of cuckoo report
    """
    cuckoo_rest_host = CUCKOO_REST_HOST
    request_url = "{0}tasks/report/{1}".format(cuckoo_rest_host, task_id)      
    response = requests.get(request_url)
    report = response.json()
    
    return report
def delete_task(task_id) :
    """
    Removes provided task_id from the Cuckoo database via API
    INPUT : task_id : int : cuckoo task id
    OUTPUT : bool : True if successful, False if not
    """
    cuckoo_rest_host = CUCKOO_REST_HOST
    request_url = "{0}tasks/delete/{1}".format(cuckoo_rest_host, task_id)    
    response = requests.get(request_url)
    if response.status_code == 200 : 
        return True
    else : 
        return False    
    
def cuckoo_task_list() :
    """
    Returns Cucko task list 
    Input : NONE 
    Output : cuckoo_tasks :iterable of Cuckoo tasks
    """
    
    cuckoo_tasks = []
    #get status of active tasks
    cuckoo_rest_host = CUCKOO_REST_HOST
    request_url = "{0}tasks/list".format(cuckoo_rest_host)
    response = requests.get(request_url).json()['tasks'];
    for task in response :
        cuckoo_task = {}
        cuckoo_task['task_id'] = task['id']
        cuckoo_task['md5'] = task['sample']['md5']
        cuckoo_task['machine'] = task['machine']
        cuckoo_task['status'] = task['status']
        cuckoo_tasks.append(cuckoo_task)
        
    return cuckoo_tasks
         
if __name__ == "__main__" :
    parser = argparse.ArgumentParser(description='Creates CSV of sample feature vectors from Cuckoo 2.0 analyses')
    parser.add_argument('-a', '--all', 
        help='Create feature vector for single cuckoo task id', action='store_true' )
    parser.add_argument('-s', 
        '--single', help='Create feature vector for single Cuckoo task id', type=int, nargs='+')
    parser.add_argument('-g', 
        '--greater', help='Create feature vectors for all Cuckoo greater or equal to provided task id', 
        type=int)
    args = parser.parse_args()
    
    #list to store each sample's feature vector
    samples = []
    
    if args.all :
        sys.stderr.write("Okay! Let's create feature vectors for all of the things!\n")        
        #get all of the task id's from cuckoo
        cuckoo_tasks = cuckoo_task_list()
        
        #get reports for each task id
        for task in cuckoo_tasks :
            if task['status'] == 'reported' :
                try : 
                    report = get_report(task['task_id'])
                    features = create_feature_vector2(report)
                    features['001_sample_md5'] = report['target']['file']['md5']
                    features['002_machine_name'] = report['info']['machine']['name']
                    features['003_task_id'] = task['task_id']
                    samples.append(features)     
                except Exception as e : 
                    sys.stderr.write("ERROR PROCESSING REPORT FOR TASK {0}".format(task['task_id']))
                    if delete_task(task['task_id']) :
                        sys.stderr.write("Removed task {0}".format(task['task_id']))
                    else :
                        raise     
                    
    elif args.greater :
        task_id = args.greater
        sys.stderr.write("Okay! Let's create feature vectors for all of the things with a task id greater or equal to {0}\n".format(task_id))
        #get all of the task id's from cuckoo
        cuckoo_tasks = cuckoo_task_list()
        
        #get reports for each task id
        for task in cuckoo_tasks :
            if (task['status'] == 'reported') and (task['task_id'] >= task_id) :
                report = get_report(task['task_id'])
                features = create_feature_vector2(report)
                features['001_sample_md5'] = report['target']['file']['md5']
                features['002_machine_name'] = report['info']['machine']['name']
                features['003_task_id'] = task['task_id']
                samples.append(features)
        
    elif args.single :
        for task_id in args.single :
            sys.stderr.write("Okay! Let's create a feature vector for task id {0}\n".format(task_id))        
            report = get_report(task_id)
            features = create_feature_vector2(report)
            features['001_sample_md5'] = report['target']['file']['md5']
            features['002_machine_name'] = report['info']['machine']['name']
            features['003_task_id'] = task_id
            samples.append(features)
            
    if samples :            
        #since each samle MAY contain different features we need to master list of feature types
        feature_types = set()
        for vector in samples :
            for key, value in vector.iteritems() : 
                feature_types.add(key)
        feature_types = sorted(list(feature_types))
        print " , ".join(feature_types)
            
        #add missing feature to each vector and sort for standardization
        for sample in samples :
            ordered_vector = []
            for feature_type in feature_types :
                if feature_type not in sample : 
                    sample[feature_type] = 0
                ordered_vector.append(str(sample[feature_type]))
                
            print " , ".join(ordered_vector)
    else :
        print "No results returned"            