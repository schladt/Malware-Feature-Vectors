"""
2015 - Mike Schladt
Example script auto generates groupings based on tags
Creates group archetype from most significant features
Computes statistical summary and plot for group 
"""
import lib.mfv as mfv
import numpy
import sys
import plotly.plotly as py
from plotly.graph_objs import *

#find that max_values_vector to use in normalization
max_values_vector = mfv.get_max_values_vector()    

#find tag groupings
tag_groups = mfv.autogen_tag_groups()
machines = ['win7x32','win7x64']

#seperate by machine
for machine in machines : 
    for tags in tag_groups :
        #group name auto generated by tags and machine
        group_name = "{0}_{1}_{2}_{3}_{4}".format(tags[0][1],tags[1][1],tags[2][1],tags[3][1],machine)
        
        print "Creating automated stats for {0}".format(group_name) 
    
        task_ids = None
        hashes = None
        
        #get subset
        subset_vectors = mfv.select_vectors(tags, [machine], task_ids, hashes)    
        subset_vectors = mfv.normalize_vectors(subset_vectors, max_values_vector)
    
        #get superset - keep only fileytpe tags and machine
        superset_vectors = mfv.select_vectors([tags[1]],[machine],None,None)
        superset_vectors = mfv.normalize_vectors(superset_vectors, max_values_vector)
    
        #find archetype vector and extract feature keys
        archetype, archetype_stddev = mfv.get_archetype(subset_vectors, superset_vectors)
        feature_keys = []
        for key, value in archetype.features.iteritems() :
            feature_keys.append(key)
        
        #find groups stats and plot archetype features for group     
        mfv.stats_summary(subset_vectors,superset_vectors)
        title = "Scatter Plot of Family {0}".format(group_name)
        print mfv.plotly_scatter(subset_vectors, None, None, feature_keys, 'families/'+group_name, title )
        print
        