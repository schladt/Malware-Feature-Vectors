"""
2015 - Mike Schladt
Example script compares vecotors to archetypes
Calculates distance to archetypes
Takes best guess at matching archetype
Plots top five choices and displays stats
"""
import MySQLdb 
import lib.mfv as mfv
import lib.config as CONST
import numpy
import json 
import sys

db_host = CONST.DB_HOST
db_user = CONST.DB_USER
db_pass = CONST.DB_PASS
db_name = CONST.DB_NAME

#establish database connection
connection = MySQLdb.connect(db_host, db_user, db_pass, db_name)
cursor = connection.cursor()

test_task_id = int(sys.argv[1])

#container for storing stddevs from mean against each archetype
stddev_tuples = []

#retrieve features from the database
cmd = "SELECT label,mean_features,stddev_features,max_value_features FROM archetypes"

cursor.execute(cmd)
results = cursor.fetchall()

for result in results :
    #parse data from results    
    archetype_label = result[0]
    mean_features = json.loads(result[1])
    stddev_features = json.loads(result[2])
    max_value_features = json.loads(result[3])

    #add features to FeatureVectors
    mean_vector = mfv.FeatureVector(None,None,None,mean_features)
    stddev_vector = mfv.FeatureVector(None,None,None,stddev_features)
    max_values_vector = mfv.FeatureVector(None,None,None,max_value_features)

    #retrieve, prune and normalize the test_vector
    test_vector = mfv.select_vectors(None,None,[test_task_id],None)[0]
    feature_keys = [key for key, value in mean_features.iteritems()]      
    test_vector = test_vector.prune_features(feature_keys)     
    test_vector = mfv.normalize_vectors([test_vector],max_values_vector)[0]


    #create containers
    x = []
    y = []
    y_stddev = []
    feature_tuples = []

    #extract feature tuples 
    for key, value in mean_vector.features.iteritems() :
        feature_tuples.append((value,key))

    #sort feaures by values and add to containers
    feature_tuples = sorted(feature_tuples)    
    for feature in feature_tuples :    
        x.append(feature[1])
        y.append(feature[0])
        y_stddev.append(stddev_vector.features[feature[1]])

    a = numpy.array(y)
    b = numpy.array(y_stddev)
    y2 = a+b

    i = 0
    features = {}
    while i < len(x) :
        features[x[i]] = y2[i]
        i += 1 
    
    archetype_plus_stddev_vector = mfv.FeatureVector(None,None,None,features)
    stddev_dist = mean_vector.get_distance(archetype_plus_stddev_vector)
        
    #calculate distance from test to archetype 
    test_dist = test_vector.get_distance(mean_vector)

    print "Distance from test task {0} to archetype {1} : {2} ... ({3} standard deviations)".format(
            test_task_id, archetype_label, test_dist, test_dist/stddev_dist)
       
    stddev_tuples.append((test_dist/stddev_dist,archetype_label))

print 
print "Sorting by standard deviations of distance from test vector to archetype mean ..."
print "-------------------------------" 
stddev_tuples = sorted(stddev_tuples)

for stddev in stddev_tuples :
    print "Archetype : {0} , Standard deviations from mean : {1}".format(stddev[1],stddev[0])   



