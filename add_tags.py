"""
2015 - Mike Schladt
Simple helper script to add tags to the mfv database

DATABASE : TABLE DEF
    
    CREATE TABLE tags(
        md5 CHAR(32) NOT NULL,
    	type TEXT NOT NULL,
    	value TEXT NOT NULL
    );
    
TAGS FILE FORMAT

<MD5>, <TAG TYPE>, <TAG VALUE>, <TAG TYPE>, <TAG VALUE> ...    
<MD5>, <TAG TYPE>, <TAG VALUE>, <TAG TYPE>, <TAG VALUE> ... 
...

(Tags should not contain special characters. I make zero effort to sanitize...)

"""
import MySQLdb 
import argparse

db_host = CONST.DB_HOST
db_user = CONST.DB_USER
db_pass = CONST.DB_PASS
db_name = CONST.DB_NAME

connection = MySQLdb.connect(db_host, db_user, db_pass, db_name)
cursor = connection.cursor()

#open tags file

parser = argparse.ArgumentParser(description='Simple helper script to add tags to malware feature vectors')
parser.add_argument('tags_file', help='Filepath of tags files', nargs='+')
args = parser.parse_args()

#submit samples to cuckoo sanbox
for file in args.tags_file :
    lines = open(file).readlines()
    
    for line in lines : 
        #break line into elements
        elements = line.split(",")
        
        #md5 is the first element
        md5 = elements.pop(0).strip()
        
        #all other elements represent tag type and value pairs
        i = 0
        while i < len(elements) : 
            tag_type = elements[i].strip()
            i += 1
            tag_value = elements[i].strip() 
            i += 1
            
            #create insert tags into database 
            cmd = "INSERT INTO tags (md5, type, value) VALUES (%s, %s, %s)"
            data = [md5, tag_type, tag_value]
            try : 
                cursor.execute(cmd, data)
            except Exception as e:
                if "Duplicate entry" in str(e) :
                    print "Duplicate entry for tag : {0} , {1} , {2}".format(md5, tag_type, tag_value)
                    continue
                else :
                    raise
                        
            print "Tag added : {0} , {1} , {2}".format(md5, tag_type, tag_value)
            

#commit and close database connection 
connection.commit()
connection.close()
