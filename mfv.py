"""
2015 - Mike Schladt
mfv.py - collection of functions to manipulate and perform analysis of malware feature vectors
"""

import argparse
import sys
import MySQLdb 
import config as CONST

db_host = CONST.DB_HOST
db_user = CONST.DB_USER
db_pass = CONST.DB_PASS
db_name = CONST.DB_NAME

def select_vectors(tags,machines,task_ids,hashes) :
    """
    Returns feature vectors matching the following input filters:  
    INPUT : tags : list of tuples : list of tuples representing at tags [(<tag type>, <tag value),() ]
    INPUT : machines : list : list of machines names (partial names okay)
    INPUT : task_ids : list : list of cuckoo task ids 
    INPUT : hashes  : list : list of md5 hashes
    OUTPUT : vectors : list of dicts : list of dictionaries representing vector 
                        features [{'<feature type>' : <feature value>, ...}, {} ...]   
    """
    vectors = []
    data = []
    first_filter = True #bool to determine if WHERE or AND should be appended
    cmd = "SELECT * FROM vectors" #base sql command
    
    #add tags filter
    if tags : 
        #create the search string
        sub_cmd = 'SELECT t1.md5 FROM tags t1 '
    
        #add INNER JOIN statements
        i = 1
        while i < len(tags) :
            sub_cmd += 'INNER JOIN tags t{0} ON t{1}.md5=t{2}.md5 '.format(i+1,i,i+1)
            i += 1
    
        #add WHERE clause 
        i = 0 
        while i < len(tags) :
            if i == 0 : 
                sub_cmd += 'WHERE t{0}.type=%s AND t{0}.value=%s '.format(i+1)
            else :
                sub_cmd += 'AND t{0}.type=%s AND t{0}.value=%s '.format(i+1)
            data.append(tags[i][0])
            data.append(tags[i][1])
            i += 1
        
        if first_filter : 
            cmd = "{0} WHERE (md5 in ({1}))".format(cmd, sub_cmd)
            first_filter = False
        else :
            cmd = "{0} AND (md5 in ({1}))".format(cmd, sub_cmd)    
    
    #add machine filter
    if machines :
        sub_cmd = "(machine LIKE %s) "
        data.append('%' + machines.pop(0) + '%') 
        for machine in machines : 
            sub_cmd += "OR (machine LIKE %s) "
            data.append('%' + machine + '%')
        
        if first_filter : 
            cmd = "{0} WHERE ({1})".format(cmd, sub_cmd)
            first_filter = False
        else :
            cmd = "{0} AND ({1})".format(cmd, sub_cmd)
    
    #add task_id filter
    if task_ids :
        sub_cmd = "(task_id=%s) "
        data.append(task_ids.pop(0)) 
        for task_id in task_ids : 
            sub_cmd += "OR (task_id=%s) "
            data.append(task_id)
        
        if first_filter : 
            cmd = "{0} WHERE ({1})".format(cmd, sub_cmd)
            first_filter = False
        else :
            cmd = "{0} AND ({1})".format(cmd, sub_cmd)

    #add hash filter
    if hashes :
        sub_cmd = "(md5=%s) "
        data.append(hashes.pop(0)) 
        for md5 in hashes : 
            sub_cmd += "OR (md5=%s) "
            data.append(md5)
        
        if first_filter : 
            cmd = "{0} WHERE ({1})".format(cmd, sub_cmd)
            first_filter = False
        else :
            cmd = "{0} AND ({1})".format(cmd, sub_cmd)            
    #DEBUG
    print cmd
    print data
                
    #connect to db and execute command
    connection = MySQLdb.connect(db_host, db_user, db_pass, db_name)
    cursor = connection.cursor()
    cursor.execute(cmd, data)
    results = cursor.fetchall()
    connection.close()
    
    for result in results : 
        print "{0} | {1} | {2} | {3} | {4}".format(result[0],result[1],result[2],result[3],result[4])
    print len(results)
    
if __name__ == '__main__' :
    parser = argparse.ArgumentParser(description='Collection of helper functions to maniputlate and perform maths on vectors')
    subparsers = parser.add_subparsers()

    select = subparsers.add_parser('select', help='Selects feature vectors assocated with provided tags')
    select.add_argument('-t', '--tag', 
        help="Specify tag type/value pairs to filter on. Example : '-t family,dyre source,bit9'", nargs='+')
    
    select.add_argument('-m', '--machine', 
        help="Specify machine name to filter on (partial names okay). Example : '-m win7x64'", nargs='+')
        
    select.add_argument('-c', '--cuckoo_task_id', 
        help="Specify cuckoo task id filter on. Example : '-c 710'", nargs='+') 
        
    select.add_argument('-d', '--md5', 
        help="Specify MD5 hash to filter on. Example : '-h 84bb1c8c5957125029e4fbfa9ec63045'", nargs='+')             

    select.set_defaults(subparser='select')

    args = parser.parse_args()

    #select sub-command
    if args.subparser == 'select' :
        
        #add tags
        if args.tag :
            tags = []
            for tag in args.tag :     
                tag = tag.split(',')
                tags.append((tag[0].strip(),tag[1].strip()))
        else :
            tags = None
        
        #add machines
        if args.machine : 
            machines = []
            for machine in args.machine :
                machines.append(machine.strip())                
        else :
            machines = None
        
        #add task_ids    
        if args.cuckoo_task_id :
            task_ids = []
            for task_id in args.cuckoo_task_id : 
                task_ids.append(task_id.strip())    
        else :
            task_ids = None
        
        #add hashes
        if args.md5 :
            hashes = [] 
            for md5 in args.md5 :
                 hashes.append(md5.strip())
        else :
            hashes = None         
                    
        vectors = select_vectors(tags,machines,task_ids,hashes)      
                    
    else : 
        print "NOPE"    